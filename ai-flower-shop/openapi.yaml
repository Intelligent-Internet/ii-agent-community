openapi: 3.0.3
info:
  title: AI Flower Shop API
  description: API for AI-powered flower shop with vector database integration
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Development server

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        image:
          type: string
        category:
          type: string
        stock:
          type: integer
        features:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - description
        - price
        - image
        - category
        - stock

    CartItem:
      type: object
      properties:
        id:
          type: string
        productId:
          type: string
        quantity:
          type: integer
        product:
          $ref: '#/components/schemas/Product'
      required:
        - id
        - productId
        - quantity

    Cart:
      type: object
      properties:
        id:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        total:
          type: number
      required:
        - id
        - items
        - total

    ChatMessage:
      type: object
      properties:
        id:
          type: string
        role:
          type: string
          enum: [user, assistant]
        content:
          type: string
        timestamp:
          type: string
          format: date-time
        sessionId:
          type: string
      required:
        - id
        - role
        - content
        - timestamp
        - sessionId

    ChatSession:
      type: object
      properties:
        id:
          type: string
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - messages

    SearchResult:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        query:
          type: string
        total:
          type: integer
      required:
        - products
        - query
        - total

    AIAction:
      type: object
      properties:
        action:
          type: string
          enum: [add_to_cart, remove_from_cart, search_products, get_product_info]
        productId:
          type: string
        quantity:
          type: integer
        query:
          type: string
      required:
        - action

    Order:
      type: object
      properties:
        id:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        total:
          type: number
        status:
          type: string
          enum: [pending, paid, shipped, delivered, cancelled]
        stripePaymentIntentId:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - items
        - total
        - status

paths:
  /products:
    get:
      summary: Get all products
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                image:
                  type: string
                category:
                  type: string
                stock:
                  type: integer
                features:
                  type: array
                  items:
                    type: string
              required:
                - name
                - description
                - price
                - image
                - category
                - stock
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      summary: Get product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

  /products/search:
    post:
      summary: Search products using vector similarity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                limit:
                  type: integer
                  default: 10
              required:
                - query
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'

  /cart:
    get:
      summary: Get current cart
      responses:
        '200':
          description: Current cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

  /cart/add:
    post:
      summary: Add item to cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
                  default: 1
              required:
                - productId
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

  /cart/remove:
    post:
      summary: Remove item from cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
                  default: 1
              required:
                - productId
      responses:
        '200':
          description: Item removed from cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

  /cart/clear:
    post:
      summary: Clear cart
      responses:
        '200':
          description: Cart cleared
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

  /chat/sessions:
    get:
      summary: Get chat sessions
      responses:
        '200':
          description: List of chat sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatSession'
    post:
      summary: Create new chat session
      responses:
        '201':
          description: New chat session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSession'

  /chat/sessions/{sessionId}/messages:
    get:
      summary: Get messages for a chat session
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
    post:
      summary: Send message to AI assistant
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
              required:
                - message
      responses:
        '200':
          description: AI response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/ChatMessage'
                  actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/AIAction'

  /ai/actions:
    post:
      summary: Execute AI action
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIAction'
      responses:
        '200':
          description: Action executed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: object
                  message:
                    type: string

  /orders:
    get:
      summary: Get orders
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create order from cart
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{id}:
    get:
      summary: Get order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /payment/create-intent:
    post:
      summary: Create Stripe payment intent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
              required:
                - orderId
      responses:
        '200':
          description: Payment intent created
          content:
            application/json:
              schema:
                type: object
                properties:
                  clientSecret:
                    type: string
                  paymentIntentId:
                    type: string

  /payment/confirm:
    post:
      summary: Confirm payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentIntentId:
                  type: string
                orderId:
                  type: string
              required:
                - paymentIntentId
                - orderId
      responses:
        '200':
          description: Payment confirmed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  order:
                    $ref: '#/components/schemas/Order'